
[
    {
        "category": "Installation & Persistence",
        "name": "EpiBrowser and OneStart installation",
        "query": "(event.dns.request contains:anycase 'api.epibrowser.com' and src.process.name = \"installer.exe\") OR (url.address contains:anycase ('resources.epibrowser.com','resources.onestart.ai') AND src.process.name = 'msiexec.exe') OR ((registry.keyPath contains:anycase ('Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\EpiBrowserUpdate','\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\OneStartAutoLaunch_') OR registry.keyPath contains:anycase ('Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\EPISoftware EpiBrowser','Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\OneStart.ai\\ OneStart') OR tgt.file.path contains:anycase ('OneStart.lnk','EpiStart.lnk')) AND src.process.name contains:anycase ('installer.exe', 'setup.exe', 'msiexec.exe')) OR #cmdline contains:anycase 'EPISoftware\\\\installer.exe'\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, event.dns.request, url.address\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, event.dns.request, url.address, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "Clickfix TTP detected",
        "query": "((src.process.name contains:anycase (\"powershell.exe\", \"cmd.exe\") and tgt.process.cmdline contains:anycase (\"mshta\",\"-w 1\",\"-w h\",\"/c curl \",\"iex \",\"iwr \",\"msiexec \") and tgt.process.cmdline contains:anycase \"http\") OR (src.process.parent.name = \"explorer.exe\" and src.process.cmdline contains:anycase (\"mshta\",\"-w 1\",\"-w h\",\"/c curl \",\"iex \",\"iwr \",\"msiexec \") and src.process.cmdline contains:anycase \"http\")) NOT (tgt.process.cmdline contains (\"chocolatey.org\") OR src.process.cmdline contains (\"chocolatey.org\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.cmdline, event.dns.request\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.cmdline, event.dns.request, Count\n| sort -Count\n| limit 100000\n"
    },
    {
        "category": "Credential Access",
        "name": "SAM Dumped based on indicator",
        "query": "indicator.name contains \"DumpSAM\" not(indicator.metadata contains \"Blocked: False\")\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by timestamp, endpoint.name, src.process.user, src.process.storyline.id, indicator.name, indicator.description, indicator.metadata\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, timestamp, endpoint.name, src.process.user, src.process.storyline.id, indicator.name, indicator.description, indicator.metadata, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Lateral Movement",
        "name": "WMIExec was used",
        "query": "((src.process.name contains:anycase (\"cmd.exe\",\"powershell.exe\") OR tgt.process.name contains:anycase (\"cmd.exe\",\"powershell.exe\"))\nAND src.process.cmdline contains:anycase \"2\"\nAND src.process.cmdline contains:anycase \"&1\"\nAND (src.process.cmdline contains:anycase (\"C$\",\"ADMIN$\",\"IPC$\",\"PRINT$\",\"FAX$\",\"Temp\") OR src.process.cmdline contains:anycase \"localhost\" OR src.process.cmdline contains:anycase \"Windows\")\nAND osSrc.process.name contains \"wmiprvse.exe\")\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "Listing of domain admin from non admin user",
        "query": "indicator.name=\"PermissionGroupsDiscovery\"  not(src.process.user contains:anycase (\"AUTORITE NT\",\"NT AUTHORITY\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, indicator.name, indicator.metadata\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, indicator.name, indicator.metadata, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Lateral Movement",
        "name": "ATExec was used",
        "query": "indicator.name contains \"ScheduleTaskRegister\"\n| let taskCode = indicator.metadata.extract_matches('Task: \"\\\\\\\\([A-Za-z0-9]{8})\"').get(0)\n| filter taskCode != null\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count = count() by endpoint.name, src.process.user, src.process.storyline.id, taskCode, indicator.metadata\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.storyline.id, taskCode, indicator.metadata, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "User harvested NTDS with Ntdsutil",
        "query": "src.process.name contains:anycase 'ntdsutil.exe' indicator.name = \"VssNtdsHarvesting\" AND not(src.process.parent.cmdline contains:anycase 'C:\\\\ProgramData\\\\NinjaRMMAgent\\\\')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, indicator.name\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, indicator.name, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Lateral Movement",
        "name": "Possible WMIC lateralisation",
        "query": "(( src.process.name contains:anycase (\"cmd.exe\",\"powershell.exe\") OR tgt.process.name contains:anycase (\"cmd.exe\",\"powershell.exe\")) AND src.process.cmdline contains:anycase \"2\" AND src.process.cmdline contains:anycase \"&1\" AND src.process.cmdline In contains:anycase ( \"C$\",\"ADMIN$\",\"IPC$\",\"PRINT$\",\"FAX$\",\"Temp\") AND src.process.cmdline OR src.process.cmdline contains:anycase \"localhost\" OR src.process.cmdline contains:anycase \"WIndows\") and osSrc.process.name contains \"wmiprvse.exe\"\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline, Count\n| sort -Count\n| limit 100000\n"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "Suspicious Powershell command",
        "query": "src.process.name contains:anycase ('cmd.exe','powershell.exe','pwsh.exe') AND src.process.cmdline contains:anycase \"2\" AND src.process.cmdline contains:anycase \"&1\" AND src.process.cmdline contains:anycase \"/Q\"\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "SAM Harvesting from VSS with esentutl",
        "query": "src.process.image.path contains:anycase \"esentutl.exe\" AND src.process.cmdline contains:anycase \"/y /vss C:\\\\Windows\\\\System32\\\\config\\\\SAM /d\" AND indicator.name = \"VssSamHarvesting\"\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path, indicator.name\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path, indicator.name, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Lateral Movement",
        "name": "SMBExec was used",
        "query": "src.process.name contains:anycase ('cmd.exe' ,'powershell.exe') AND src.process.cmdline contains:anycase \"2\" AND src.process.cmdline contains:anycase \"&1\" AND (src.process.cmdline contains:anycase ( \"C$\", \"ADMIN$\",\"IPC$\", \"PRINT$\", \"FAX$\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000\n"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "NLTEST was used",
        "query": "((src.process.name=\"nltest.exe\" AND src.process.cmdline contains:anycase(\"dclist\",\"dcname\",\"dsgetdc\",\"dnsgetdc\",\"finduser\",\"domain_trusts\",\"dsquerydns\")) OR (tgt.process.name=\"nltest.exe\" AND tgt.process.cmdline contains:anycase (\"dclist\",\"dcname\",\"dsgetdc\",\"dnsgetdc\",\"finduser\",\"domain_trusts\",\"dsquerydns\")) OR (src.process.cmdline contains:anycase \"nltest\" AND src.process.cmdline contains:anycase (\"dclist\",\"dcname\",\"dsgetdc\",\"dnsgetdc\",\"finduser\",\"domain_trusts\",\"dsquerydns\")) OR (tgt.process.cmdline contains:anycase \"nltest\" AND tgt.process.cmdline contains:anycase(\"dclist\",\"dcname\",\"dsgetdc\",\"dnsgetdc\",\"finduser\",\"domain_trusts\",\"dsquerydns\")))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Command & Control",
        "name": "LOLTunnels domain / url hits",
        "query": "event.dns.request contains:anycase (\"shellhub.io\", \"sharedwithexpose.com\", \"sharedwithexpose.com\", \"eu-1.sharedwithexpose.com\", \"us-1.sharedwithexpose.com\", \"us-2.sharedwithexpose.com\", \"ap-1.sharedwithexpose.com\", \"in-1.sharedwithexpose.com\", \"sa-1.sharedwithexpose.com\", \"au-1.sharedwithexpose.com\", \"eu-2.sharedwithexpose.com\", \"tuns.sh\", \"ssi.sh\", \"tunnelto.dev\", \"pagekite.net\", \"pagekite.me\", \"loca.lt\", \"localtunnel.me\", \"dataplicity.com\", \"devtunnels.ms\", \"tunnels.api.visualstudio.com\", \"get.telebit.io\", \"telebit.io\", \"telebit.cloud\", \"telebit.fun\", \"devtunnels.ms\", \"data.rel.tunnels.api.visualstudio.com\", \"rel.tunnels.api.visualstudio.com\", \"global.rel.tunnels.api.visualstudio.com\", \"localhost.run\", \"pinggy.io\", \"pinggy.link\", \"amazonaws.com/public.pinggy.binaries/\", \"loophole.eu.auth0.com\", \"loophole.site\", \"burrow.io\", \"burrow.link\", \"io.burrow.link:\", \"localto.net\", \"localtonet.com\", \"tmate.io\", \"tunnel.staqlab.com\", \"staqlab-tunnel.com\", \"staqlab.com\", \"devtunnels.ms\", \"tunnels.api.visualstudio.com\", \"jprq.io\", \"bore.pub:\", \"btunnel.co.in\", \"btunnel.in\", \"ngrok.com\", \"ngrok.io\", \"ngrok.dev\", \"ngrok.app\", \"ngrok.pro\", \"ngrok.pizza\", \"ngrok-agent.com\", \"ngrok-free.app\", \"ngrok-cname.com\", \"serveo.net\", \"pitunnel.com\", \"openport.io\", \"beeceptor.com\", \"loca.lt\", \"localtunnel.me\", \"localxpose.io\", \"expose.sh\", \"expos.es\", \"trycloudflare.com\", \"cfargotunnel.com\", \"cftunnel.com\", \"bore.digital:\", \"bore.digital\") or url.address contains:anycase (\"shellhub.io\", \"sharedwithexpose.com\", \"sharedwithexpose.com\", \"eu-1.sharedwithexpose.com\", \"us-1.sharedwithexpose.com\", \"us-2.sharedwithexpose.com\", \"ap-1.sharedwithexpose.com\", \"in-1.sharedwithexpose.com\", \"sa-1.sharedwithexpose.com\", \"au-1.sharedwithexpose.com\", \"eu-2.sharedwithexpose.com\", \"tuns.sh\", \"ssi.sh\", \"tunnelto.dev\", \"pagekite.net\", \"pagekite.me\", \"loca.lt\", \"localtunnel.me\", \"dataplicity.com\", \"devtunnels.ms\", \"tunnels.api.visualstudio.com\", \"get.telebit.io\", \"telebit.io\", \"telebit.cloud\", \"telebit.fun\", \"devtunnels.ms\", \"data.rel.tunnels.api.visualstudio.com\", \"rel.tunnels.api.visualstudio.com\", \"global.rel.tunnels.api.visualstudio.com\", \"localhost.run\", \"pinggy.io\", \"pinggy.link\", \"amazonaws.com/public.pinggy.binaries/\", \"loophole.eu.auth0.com\", \"loophole.site\", \"burrow.io\", \"burrow.link\", \"io.burrow.link:\", \"localto.net\", \"localtonet.com\", \"tmate.io\", \"tunnel.staqlab.com\", \"staqlab-tunnel.com\", \"staqlab.com\", \"devtunnels.ms\", \"tunnels.api.visualstudio.com\", \"jprq.io\", \"bore.pub:\", \"btunnel.co.in\", \"btunnel.in\", \"ngrok.com\", \"ngrok.io\", \"ngrok.dev\", \"ngrok.app\", \"ngrok.pro\", \"ngrok.pizza\", \"ngrok-agent.com\", \"ngrok-free.app\", \"ngrok-cname.com\", \"serveo.net\", \"pitunnel.com\", \"openport.io\", \"beeceptor.com\", \"loca.lt\", \"localtunnel.me\", \"localxpose.io\", \"expose.sh\", \"expos.es\", \"trycloudflare.com\", \"cfargotunnel.com\", \"cftunnel.com\", \"bore.digital:\", \"bore.digital\")\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, event.dns.request\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, event.dns.request, Count\n| sort -Count\n| limit 100000\n"
    },
    {
        "category": "Execution & Persistence",
        "name": "Scheduled task started remotely",
        "query": "indicator.name contains \"ScheduledTaskProcessStartedRemotely\" not(indicator.metadata contains (\"\\\\BC\\\\\",\"\\\\Microsoft\\\\Configuration Manager\\\\\",\"OneDrive Startup\",\"\\\\Microsoft\\\\Windows\\\\UpdateOrchestrator\",\"\\\\Take Control Agent N-Central Helper\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by indicator.name, indicator.description, indicator.metadata\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, indicator.name, indicator.description, indicator.metadata, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Forensics & Investigation",
        "name": "Forensic memory aquisistion tools used",
        "query": "src.process.publisher contains (\"MAGNET FORENSICS INC.\",\"ACCESSDATA GROUP\",\"EXTERRO\",\"MOONSOLS SARL\",\"BELKASOFT\",\"BASIS TECHNOLOGY CORP\",\"FIREEYE\",\"VOLEXITY\",\"ZIMMERMAN\")\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "MSIExec remote installation used",
        "query": "(tgt.process.name contains:anycase \"msiexec.exe\" and src.process.name contains:anycase \"cmd.exe\" and tgt.process.cmdline contains:anycase \"http\" and ( tgt.process.cmdline contains:anycase \"/q\" or tgt.process.cmdline contains:anycase \"-q\")) not(tgt.process.cmdline contains (\"jabra.com\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.storyline.id, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.storyline.id, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.cmdline, Count\n| sort -Count\n| limit 100000\n"
    },
    {
        "category": "Installation & Persistence",
        "name": "Potential malicious RegistryAutoRun detected",
        "query": "indicator.name contains \"RegistryAutorun\" indicator.metadata contains:anycase (\"\\\\run\") indicator.metadata contains:anycase (\".ps1\",\".cmd\",\".vba\",\".xlsm\",\".xlsx\",\".docx\",\"cscript\",\".txt\",\".raw\",\".docm\",\".pptm\",\".exe\",\".pif\") not(src.process.displayName contains:anycase (\"Microsoft\",\"dotnetcore\",\"OneDrive\",\"Edge\",\"Chrome\",\"dropbox\",\"Intel\u00ae\",\"Windows\u00ae\",\"Java Platform\",\"Adobe\",\"slack\",\"Win32 Cabinet Self-Extractor\",\"IExpress Setup\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by indicator.name, indicator.metadata, src.process.displayName\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, indicator.name, indicator.metadata, src.process.displayName, Count\n| sort -Count\n| limit 100000\n\n"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "RMM DNS or Urls events detected",
        "query": "(event.dns.request contains:anycase (\"portal.ehorus.com\",\"distantdesktop.com\",\"addigy.com\",\"sunlogin.oray.com\",\"showmypc.com\",\"fastviewer.com\",\"radmin.com\",\"syncromsp.com\",\"servably.com\",\"aurelius.host\",\"kabuto.io\",\"repairshopr.com\",\"sorillus.com\",\"acceo.com\",\"naverisk.com\",\"aweray.net\",\"aweray.com\",\"laplink.com\",\"donkz.nl\",\"connectwise.com\",\"screenconnect.com\",\"splashtop.com\",\"splashtop.eu\",\"rudesktop.ru\",\"ivanticloud.com\",\"ivanti.com\",\"kickidler.com\",\"dwservice.net\",\"pdq.com\",\"royalapps.com\",\"gatherplace.com\",\"gatherplace.net\",\"instanthousecall.com\",\"instanthousecall.net\",\"rustdesk.com\",\"neturo.uplus.co.kr\",\"ninjarmm.com\",\"ninjaone.com\",\"jumpcloud.com\",\"fixme.it\",\"techinline.net\",\"gotomypc.com\",\"islonline.com\",\"pcvisit.de\",\"backdrop.cloud\",\"netop.com\",\"nchuser.com\",\"fleetdeck.io\",\"ntrsupport.com\",\"datto.com\",\"centrastage.net\",\"anysupport.net\",\"adobeconnect.com\",\"beyondtrustcloud.com\",\"bomgarcloud.com\",\"skyfex.com\",\"deskroll.com\",\"remote.it\",\"atera.com\",\"tele-desk.com\",\"logmein.com\",\"logmein.eu\",\"logmeinrescue.com\",\"logmeininc.com\",\"getscreen.me\",\"beamyourscreen.com\",\"kaseya.com\",\"auvik.com\",\"getgo.com\",\"fastsupport.com\",\"gotoassist.com\",\"helpme.net\",\"desktopstreaming.com\",\"anyplace-control.com\",\"helpu.co.kr\",\"dameware.com\",\"mygreenpc.com\",\"level.io\",\"remotepass.com\",\"xeox.com\",\"simple-help.com\",\"comodo.com\",\"itarian.com\",\"domotz.co\",\"01com.com\",\"internetid.ru\",\"emcosoftware.com\",\"intelliadmin.com\",\"ezhelp.co.kr\",\"crossloop.com\",\"spytech-web.com\",\"ammyy.com\",\"parallels.com\",\"litemanager.ru\",\"litemanager.com\",\"anyviewer.com\",\"aomeisoftware.com\",\"todesk.com\",\"todesktop.com\",\"tailscale.com\",\"server-eye.de\",\"hostedrmm.com\",\"electric.ai\",\"ultravnc.com\",\"rview.com\",\"syspectr.com\",\"aeroadmin.com\",\"centuriontech.com\",\"tightvnc.com\",\"alpemix.com\",\"realvnc.com\",\"mikogo4.com\",\"mikogo.com\",\"ultraviewer.net\",\"jumpdesktop.com\",\"jumpto.me\",\"ericom.com\",\"soti.net\",\"pilixo.com\",\"teamviewer.com\",\"deskday.ai\",\"beinsync.net\",\"beinsync.com\",\"netsupportmanager.com\",\"ehorus.com\",\"247ithelp.com\",\"superopsbeta.com\",\"superops.ai\",\"superopsalpha.com\",\"anydesk.com\",\"royalapps.com\",\"iperiusremote.com\",\"remotedesktop.com\",\"remotepc.com\",\"laplink.com\",\"ericom.com\",\"goverlan.com\",\"remotecall.com\",\"startsupport.com\",\"eset.com\",\"mremoteng.org\",\"parsec.app\",\"parsec.gg\",\"kace.com\",\"nomachine.com\",\"portswigger.net\",\"owasp.org\",\"tenable.com\",\"cirt.net\",\"acunetix.com\",\"netsparker.com\",\"qualys.com\",\"burpcollaborator.net\",\"oastify.com\") OR url.address contains:anycase (\"portal.ehorus.com\",\"distantdesktop.com\",\"addigy.com\",\"sunlogin.oray.com\",\"showmypc.com\",\"fastviewer.com\",\"radmin.com\",\"syncromsp.com\",\"servably.com\",\"aurelius.host\",\"kabuto.io\",\"repairshopr.com\",\"sorillus.com\",\"acceo.com\",\"naverisk.com\",\"aweray.net\",\"aweray.com\",\"laplink.com\",\"donkz.nl\",\"connectwise.com\",\"screenconnect.com\",\"splashtop.com\",\"splashtop.eu\",\"rudesktop.ru\",\"ivanticloud.com\",\"ivanti.com\",\"kickidler.com\",\"dwservice.net\",\"pdq.com\",\"royalapps.com\",\"gatherplace.com\",\"gatherplace.net\",\"instanthousecall.com\",\"instanthousecall.net\",\"rustdesk.com\",\"neturo.uplus.co.kr\",\"ninjarmm.com\",\"ninjaone.com\",\"jumpcloud.com\",\"fixme.it\",\"techinline.net\",\"gotomypc.com\",\"islonline.com\",\"pcvisit.de\",\"backdrop.cloud\",\"netop.com\",\"nchuser.com\",\"fleetdeck.io\",\"ntrsupport.com\",\"datto.com\",\"centrastage.net\",\"anysupport.net\",\"adobeconnect.com\",\"beyondtrustcloud.com\",\"bomgarcloud.com\",\"skyfex.com\",\"deskroll.com\",\"remote.it\",\"atera.com\",\"tele-desk.com\",\"logmein.com\",\"logmein.eu\",\"logmeinrescue.com\",\"logmeininc.com\",\"getscreen.me\",\"beamyourscreen.com\",\"kaseya.com\",\"auvik.com\",\"getgo.com\",\"fastsupport.com\",\"gotoassist.com\",\"helpme.net\",\"desktopstreaming.com\",\"anyplace-control.com\",\"helpu.co.kr\",\"dameware.com\",\"mygreenpc.com\",\"level.io\",\"remotepass.com\",\"xeox.com\",\"simple-help.com\",\"comodo.com\",\"itarian.com\",\"domotz.co\",\"01com.com\",\"internetid.ru\",\"emcosoftware.com\",\"intelliadmin.com\",\"ezhelp.co.kr\",\"crossloop.com\",\"spytech-web.com\",\"ammyy.com\",\"parallels.com\",\"litemanager.ru\",\"litemanager.com\",\"anyviewer.com\",\"aomeisoftware.com\",\"todesk.com\",\"todesktop.com\",\"tailscale.com\",\"server-eye.de\",\"hostedrmm.com\",\"electric.ai\",\"ultravnc.com\",\"rview.com\",\"syspectr.com\",\"aeroadmin.com\",\"centuriontech.com\",\"tightvnc.com\",\"alpemix.com\",\"realvnc.com\",\"mikogo4.com\",\"mikogo.com\",\"ultraviewer.net\",\"jumpdesktop.com\",\"jumpto.me\",\"ericom.com\",\"soti.net\",\"pilixo.com\",\"teamviewer.com\",\"deskday.ai\",\"beinsync.net\",\"beinsync.com\",\"netsupportmanager.com\",\"ehorus.com\",\"247ithelp.com\",\"superopsbeta.com\",\"superops.ai\",\"superopsalpha.com\",\"anydesk.com\",\"royalapps.com\",\"iperiusremote.com\",\"remotedesktop.com\",\"remotepc.com\",\"laplink.com\",\"ericom.com\",\"goverlan.com\",\"remotecall.com\",\"startsupport.com\",\"eset.com\",\"mremoteng.org\",\"parsec.app\",\"parsec.gg\",\"kace.com\",\"nomachine.com\",\"portswigger.net\",\"owasp.org\",\"tenable.com\",\"cirt.net\",\"acunetix.com\",\"netsparker.com\",\"qualys.com\",\"burpcollaborator.net\",\"oastify.com\"))\n| filter not(event.dns.request contains:anycase (\"dl.acronis.com\",\"teamviewer.com\",\"getgo.com\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), TotalHits = count(), UniqueDnsRequests = array_agg_distinct(event.dns.request), UniqueUrlDomains = array_agg_distinct(url.address) by endpoint.name\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| let AllDnsRequests = UniqueDnsRequests.to_string(', '), AllUrlDomains  = UniqueUrlDomains.to_string(', ')\n| columns \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, TotalHits, AllDnsRequests, AllUrlDomains\n| sort -TotalHits\n| limit 100000"
    },
    {
        "category": "Installation & Persistence",
        "name": "Tactical RMM Installation",
        "query": "(src.process.cmdline contains:anycase \"-m\" AND src.process.cmdline contains:anycase \"install\" AND src.process.cmdline contains:anycase \"--api\" AND src.process.cmdline contains:anycase \"--client-id\" AND src.process.cmdline contains:anycase \"--site-id\" AND src.process.cmdline contains:anycase \"--agent-type\" AND src.process.cmdline contains:anycase \"--auth\")\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Installation & Persistence",
        "name": "Windows Suspicious Scheduled Task Creation",
        "query": "(event.category = 'scheduled_task' AND event.type != 'Task Delete' AND (task.path contains:anycase \"cmd.exe\") AND (task.path contains:anycase \"temp\" OR task.path contains:anycase \"rundll32\" OR task.path contains:anycase \"wmic\" OR task.path contains:anycase \"powershell\" OR task.path contains:anycase \"appdata\") AND NOT (task.path contains:anycase \"ansible\" OR task.path contains:anycase \"RemoteSigned\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, task.name, task.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, task.name, task.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "MMC Spawning Windows Shell",
        "query": "(src.process.parent.name = 'mmc.exe' AND (src.process.name in ('cmd.exe', 'powershell.exe', 'powershell_ise.exe', 'wscript.exe', 'cscript.exe', 'sh.exe', 'bash.exe', 'reg.exe', 'regsvr32.exe') OR src.process.name contains:anycase 'bitsadmin'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "Suspicious Windows Installer Execution",
        "query": "((src.process.name = 'msiexec.exe' OR src.process.cmdline contains:anycase 'msiexec') AND (src.process.cmdline contains:anycase 'http://' OR src.process.cmdline contains:anycase 'https://') AND (src.process.cmdline contains:anycase '-i' OR src.process.cmdline contains:anycase '-a' OR src.process.cmdline contains:anycase '/i' OR src.process.cmdline contains:anycase '/a' OR src.process.cmdline contains:anycase '/qn' OR src.process.cmdline contains:anycase '-qn'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Exfiltration",
        "name": "Powershell UploadString Function",
        "query": "((src.process.cmdline contains:anycase '.uploadstring' OR src.process.cmdline contains:anycase '.uploaddata' OR src.process.cmdline contains:anycase '.uploadfile' OR src.process.cmdline contains:anycase '.uploadvalues' OR cmdScript.content contains:anycase '.uploadstring' OR cmdScript.content contains:anycase '.uploaddata' OR cmdScript.content contains:anycase '.uploadfile' OR cmdScript.content contains:anycase '.uploadvalues') AND NOT (src.process.image.path contains:anycase 'azure-pipelines-tasks-msbuildhelpers' OR src.process.image.path contains:anycase 'RemoteDeployer.Utility.ps1'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, src.process.image.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, src.process.image.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "Address Space Layout Randomization (ASLR) Alteration",
        "query": "((src.process.cmdline contains:anycase 'randomize_va_space' AND (src.process.cmdline contains:anycase '0' OR src.process.cmdline contains:anycase 'tee')) AND NOT (src.process.name in ('grep', 'cat')))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "Suspicious Hostname",
        "query": "(endpoint.name contains:anycase (\"parrot\",\"pentest\",\"redteam\",\"attack\",\"commando\",\"kali\",\"exegol\") OR endpoint.name matches:anycase 'DESKTOP-[A-Z0-9]{2,15}' OR endpoint.name matches:anycase 'LAPTOP-[A-Z0-9]{2,15}' OR endpoint.name matches:anycase 'WIN-[A-Z0-9]{2,15}')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, event.login.userName\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, event.login.userName, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Command & Control",
        "name": "SOCKS Tunneling Tool",
        "query": "((src.process.cmdline contains:anycase 'socks5' OR src.process.cmdline contains:anycase 'socks4' OR src.process.cmdline contains:anycase '--tls-skip-verify') AND NOT (src.process.cmdline contains:anycase 'check.torproject.org' OR src.process.cmdline contains:anycase 'SOCKS5_GSSAPI'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Command & Control",
        "name": "Socat Relaying Socket",
        "query": "((src.process.cmdline contains:anycase 'tcp-l:' OR src.process.cmdline contains:anycase 'tcp4-l:' OR src.process.cmdline contains:anycase 'tcp6-l:' OR src.process.cmdline contains:anycase 'tcp-listen:' OR src.process.cmdline contains:anycase 'tcp4-listen:' OR src.process.cmdline contains:anycase 'tcp6-listen:' OR src.process.cmdline contains:anycase 'inet-l:' OR src.process.cmdline contains:anycase 'inet4-l:' OR src.process.cmdline contains:anycase 'inet6-l:' OR src.process.cmdline contains:anycase 'inet-listen:' OR src.process.cmdline contains:anycase 'inet4-listen:' OR src.process.cmdline contains:anycase 'inet6-listen:' OR src.process.cmdline contains:anycase 'ssl-l:' OR src.process.cmdline contains:anycase 'openssl-listen:') AND (src.process.cmdline contains:anycase 'tcp:' OR src.process.cmdline contains:anycase 'tcp4:' OR src.process.cmdline contains:anycase 'tcp6:' OR src.process.cmdline contains:anycase 'tcp-connect:' OR src.process.cmdline contains:anycase 'tcp4-connect:' OR src.process.cmdline contains:anycase 'tcp6-connect:' OR src.process.cmdline contains:anycase 'inet:' OR src.process.cmdline contains:anycase 'inet4:' OR src.process.cmdline contains:anycase 'inet6:' OR src.process.cmdline contains:anycase 'ssl:' OR src.process.cmdline contains:anycase 'openssl:' OR src.process.cmdline contains:anycase 'openssl-connect:' OR src.process.cmdline contains:anycase 'local:' OR src.process.cmdline contains:anycase 'unix-connect:'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "Language Discovery",
        "query": "(cmdScript.content contains:anycase 'query' AND cmdScript.content contains:anycase 'MuiCached')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "Screenconnect Remote Execution",
        "query": "(src.process.parent.name = 'ScreenConnect.ClientService.exe' AND src.process.name in ('powershell.exe', 'cmd.exe'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "NetExec RDP Behaviour detected",
        "query": "((src.process.name contains:anycase ('| clip & exit' ,'clip; exit')) OR (tgt.process.cmdline contains:anycase ('| clip & exit' ,'clip; exit'))) OR (src.process.name contains:anycase (\"clip.exe\") AND src.parent.process.name contains:anycase (\"powershell.exe\",\"pwsh.exe\",\"mshta.exe\",\"msiexec.exe\",\"cmd.exe\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000\n"
    },
    {
        "category": "Credential Access",
        "name": "Credential Dump Tools Related Files",
        "query": "(((tgt.file.path contains:anycase 'pwdump' OR tgt.file.path contains:anycase 'pwhashes' OR tgt.file.path contains:anycase 'wce_ccache' OR tgt.file.path contains:anycase 'wce_krbtkts' OR tgt.file.path contains:anycase 'fgdump-log' OR tgt.file.path contains:anycase 'test.pwd' OR tgt.file.path contains:anycase 'lsremora64.dll' OR tgt.file.path contains:anycase 'lsremora.dll' OR tgt.file.path contains:anycase 'fgexec.exe' OR tgt.file.path contains:anycase 'wceaux.dll' OR tgt.file.path contains:anycase 'sam.out' OR tgt.file.path contains:anycase 'security.out' OR tgt.file.path contains:anycase 'system.out' OR tgt.file.path contains:anycase 'ntds.out' OR tgt.file.path contains:anycase 'dumpext.dll' OR tgt.file.path contains:anycase 'dumpsvc.exe' OR tgt.file.path contains:anycase 'cachedump64.exe' OR tgt.file.path contains:anycase 'cachedump.exe' OR tgt.file.path contains:anycase 'pstgdump.exe' OR tgt.file.path contains:anycase 'servpw.exe' OR tgt.file.path contains:anycase 'servpw64.exe' OR tgt.file.path contains:anycase 'pwdump.exe') OR (tgt.file.path endswith '.kirbi' OR tgt.file.path endswith '.ccache')) AND NOT (tgt.file.path contains:anycase '_PSScriptPolicyTest_'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, tgt.file.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, tgt.file.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "Opening Of a Password File",
        "query": "((src.process.cmdline contains:anycase 'mdp' OR src.process.cmdline contains:anycase 'password' OR src.process.cmdline contains:anycase 'mot de passe' OR src.process.cmdline contains:anycase 'mots de passe') AND src.process.name in ('notepad.exe', 'winword.exe', 'excel.exe', 'powerpnt.exe', 'outlook.exe') AND NOT ((src.process.cmdline contains:anycase 'firefox.exe' OR src.process.cmdline contains:anycase 'msedge.exe' OR src.process.cmdline contains:anycase 'chrome.exe' OR src.process.cmdline contains:anycase 'Office16') AND (src.process.cmdline contains:anycase 'reset' OR src.process.cmdline contains:anycase 'forgot' OR src.process.cmdline contains:anycase 'Réinitialiser')))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "Wdigest Enable UseLogonCredential",
        "query": "((registry.keyPath contains:anycase '\\WDigest\\UseLogonCredential' AND registry.value contains:anycase '1') OR (src.process.cmdline contains:anycase 'reg' AND src.process.cmdline contains:anycase 'add' AND src.process.cmdline contains:anycase 'wdigest' AND src.process.cmdline contains:anycase '/v' AND src.process.cmdline contains:anycase 'uselogoncredential' AND src.process.cmdline contains:anycase '1'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, registry.keyPath, registry.value\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, registry.keyPath, registry.value, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Exfiltration",
        "name": "Rclone Process",
        "query": "(((src.process.name in ('rclone.exe', 'rclone') OR src.process.cmdline contains:anycase 'rclone') AND (src.process.cmdline contains:anycase 'config' OR src.process.cmdline contains:anycase 'copy' OR src.process.cmdline contains:anycase 'sync' OR src.process.cmdline contains:anycase 'mega' OR src.process.cmdline contains:anycase 'pcloud' OR src.process.cmdline contains:anycase 'ftp' OR src.process.cmdline contains:anycase 'pass' OR src.process.cmdline contains:anycase 'user' OR src.process.cmdline contains:anycase 'lsd' OR src.process.cmdline contains:anycase 'ls' OR src.process.cmdline contains:anycase 'remote')) OR ((src.process.cmdline contains:anycase 'copy' AND src.process.cmdline contains:anycase ':' AND src.process.cmdline contains:anycase '--') AND (src.process.cmdline contains:anycase 'mega:' OR src.process.cmdline contains:anycase 'ftp:' OR src.process.cmdline contains:anycase 'pcloud:')) OR ((src.process.cmdline contains:anycase 'copy' AND src.process.cmdline contains:anycase 'config' AND src.process.cmdline contains:anycase '.conf') AND (src.process.cmdline contains:anycase '--no-check-certificate' OR src.process.cmdline contains:anycase '--multi-thread--streams' OR src.process.cmdline contains:anycase '--transfers' OR src.process.cmdline contains:anycase '--progress' OR src.process.cmdline contains:anycase '--ignore-existing' OR src.process.cmdline contains:anycase '--auto-confirm'))) AND NOT (src.process.cmdline contains:anycase 'chocolatey')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Command & Control",
        "name": "TOR Usage Generic Rule",
        "query": "(indicator.name contains:anycase 'TorIP' OR indicator.description contains:anycase 'Tor exit node' OR indicator.metadata contains:anycase 'tor:') AND NOT (event.network.direction = 'inbound' AND (indicator.name contains:anycase 'TorIP' OR indicator.description contains:anycase 'Tor exit node' OR indicator.metadata contains:anycase 'tor:'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.ip.address, dst.ip.address, indicator.name, indicator.description, indicator.metadata\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.ip.address, dst.ip.address, indicator.name, indicator.description, indicator.metadata, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "Shadow Copies",
        "query": "(((src.process.name endswith 'vssadmin.exe' OR src.process.name endswith 'diskshadow.exe') AND src.process.cmdline contains:anycase 'list' AND src.process.cmdline contains:anycase 'shadows') OR (src.process.name = 'vssadmin.exe' AND src.process.cmdline contains:anycase 'create' AND src.process.cmdline contains:anycase 'shadow') OR (src.process.name endswith 'powershell.exe' AND src.process.cmdline contains:anycase 'Win32_ShadowCopy') OR (cmdScript.content contains:anycase 'Get-WmiObject' AND cmdScript.content contains:anycase 'Win32_ShadowCopy') OR (cmdScript.content contains:anycase 'Get-CimInstance' AND cmdScript.content contains:anycase 'Win32_ShadowCopy')) AND NOT (src.process.cmdline contains:anycase 'AutoRetry')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Exfiltration",
        "name": "Compress Data for Exfiltration via Archiver",
        "query": "(((src.process.name in ('winrar.exe', 'rar.exe') AND (src.process.cmdline contains:anycase ' -r ' OR src.process.cmdline contains:anycase ' -m ' OR src.process.cmdline contains:anycase '-ep ' OR src.process.cmdline contains:anycase '-hp' OR src.process.cmdline contains:anycase ' -p ' OR src.process.cmdline contains:anycase '-ta' OR src.process.cmdline contains:anycase '-tb' OR src.process.cmdline contains:anycase '-sdel' OR src.process.cmdline contains:anycase '-dw')) OR (src.process.name in ('winzip.exe', 'winzip64.exe') AND (src.process.cmdline contains:anycase ' -s ' OR src.process.cmdline contains:anycase '-min' OR src.process.cmdline contains:anycase ' -a '))) AND NOT (tgt.file.path contains:anycase 'Meshroom' OR tgt.file.path contains:anycase 'CompilacionVB6'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.file.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.file.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "Disabling SmartScreen Via Registry",
        "query": "((registry.value = 'EnableSmartScreen' AND registry.keyPath contains:anycase 'DWORD (0x00000000)') OR (registry.value = 'SmartScreenEnabled' AND registry.keyPath contains:anycase 'Off'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, registry.keyPath, registry.value\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, registry.keyPath, registry.value, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Privilege Escalation",
        "name": "UAC Bypass Using Fodhelper",
        "query": "(registry.keyPath contains:anycase '\\\\ms-settings\\\\Shell\\\\Open\\\\command' AND registry.value contains:anycase 'DelegateExecute')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, registry.keyPath, registry.value\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, registry.keyPath, registry.value, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "Usage Of Sysinternals Tools",
        "query": "(registry.value = 'EulaAccepted' OR src.process.cmdline contains:anycase '-accepteula')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, registry.keyPath, registry.value\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, registry.keyPath, registry.value, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Installation & Persistence",
        "name": "Malware Persistence Registry Key",
        "query": "NOT (registry.value contains:anycase 'atlassian' OR registry.value contains:anycase 'Agent' OR registry.value contains:anycase 'BlueJeans' OR registry.value contains:anycase 'Cisco' OR registry.value contains:anycase 'Discord' OR registry.value contains:anycase 'Dropbox' OR registry.value contains:anycase 'Docker' OR registry.value contains:anycase 'EIConnectorProxy' OR registry.value contains:anycase 'GoToMeeting' OR registry.value contains:anycase 'Lifesize' OR registry.value contains:anycase 'Mattermost' OR registry.value contains:anycase 'Microsoft Edge Update' OR registry.value contains:anycase 'OneDrive' OR registry.value contains:anycase 'PTOneClick' OR registry.value contains:anycase 'slack' OR registry.value contains:anycase 'Teams' OR registry.value contains:anycase 'VMware' OR registry.value contains:anycase 'W3DClient' OR registry.value contains:anycase 'MicrosoftSaRA' OR src.process.image.path contains:anycase 'atlassian' OR src.process.image.path contains:anycase 'blujeanslauncher' OR src.process.image.path contains:anycase 'dropbox' OR src.process.image.path contains:anycase 'msiexec.exe' OR src.process.image.path contains:anycase 'onedrivesetup.exe' OR src.process.image.path contains:anycase 'sara.exe' OR src.process.cmdline contains:anycase 'Letsignit') AND (((registry.keyPath endswith 'Microsoft\\\\Windows\\\\CurrentVersion\\\\Run' OR registry.keyPath endswith 'Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run' OR registry.keyPath endswith 'Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce') AND event.type = 'Registry Value Set' AND (registry.value contains:anycase 'C:\\\\Windows\\\\Temp\\\\' OR registry.value contains:anycase 'C:\\\\ProgramData\\\\' OR registry.value contains:anycase 'Recycle.bin\\\\' OR registry.value contains:anycase 'AppData' OR registry.value contains:anycase 'C:\\\\Temp\\\\' OR registry.value contains:anycase 'C:\\\\Users\\\\Public\\\\' OR registry.value contains:anycase 'C:\\\\Users\\\\Default\\\\' OR registry.value contains:anycase 'wscript' OR registry.value contains:anycase 'script') AND registry.value endswith '.exe') OR (src.process.cmdline contains:anycase 'reg' AND src.process.cmdline contains:anycase 'add' AND src.process.cmdline contains:anycase 'microsoft\\\\windows\\\\currentversion' AND src.process.cmdline contains:anycase '/f' AND src.process.cmdline contains:anycase '/v' AND src.process.cmdline contains:anycase 'reg_sz' AND src.process.cmdline contains:anycase 'c:\\\\users\\\\' AND src.process.cmdline contains:anycase '.exe' AND (src.process.cmdline contains:anycase '\\\\run' OR src.process.cmdline contains:anycase '\\\\policies\\\\explorer\\\\run' OR src.process.cmdline contains:anycase '\\\\runonce')))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, registry.keyPath, registry.value, src.process.image.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, registry.keyPath, registry.value, src.process.image.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "BITSAdmin Download",
        "query": "((src.process.name = 'bitsadmin.exe' AND ((src.process.cmdline contains:anycase ' /transfer ' OR src.process.cmdline contains:anycase 'download' OR src.process.cmdline contains:anycase 'ftp' OR src.process.cmdline contains:anycase '\\\\') OR (src.process.cmdline contains:anycase '/addfile ' AND src.process.cmdline contains:anycase 'http'))) OR (src.process.cmdline contains:anycase 'copy' AND src.process.cmdline contains:anycase 'bitsadmin.exe'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "Suspicious PowerShell Keywords",
        "query": "((cmdScript.content contains:anycase 'System.Reflection.Assembly.Load($' OR cmdScript.content contains:anycase '[System.Reflection.Assembly]::Load($' OR cmdScript.content contains:anycase '[Reflection.Assembly]::Load($' OR cmdScript.content contains:anycase 'System.Reflection.AssemblyName' OR cmdScript.content contains:anycase 'Reflection.Emit.AssemblyBuilderAccess' OR cmdScript.content contains:anycase 'Runtime.InteropServices.DllImportAttribute' OR cmdScript.content contains:anycase 'SuspendThread' OR cmdScript.content contains:anycase 'DefineDynamicModule' OR cmdScript.content contains:anycase 'GetDelegateForFunctionPointer' OR cmdScript.content contains:anycase 'System.Reflection.CallingConventions' OR src.process.cmdline contains:anycase 'System.Reflection.Assembly.Load($' OR src.process.cmdline contains:anycase '[System.Reflection.Assembly]::Load($' OR src.process.cmdline contains:anycase '[Reflection.Assembly]::Load($' OR src.process.cmdline contains:anycase 'System.Reflection.AssemblyName' OR src.process.cmdline contains:anycase 'Reflection.Emit.AssemblyBuilderAccess' OR src.process.cmdline contains:anycase 'Runtime.InteropServices.DllImportAttribute' OR src.process.cmdline contains:anycase 'SuspendThread' OR src.process.cmdline contains:anycase 'DefineDynamicModule' OR src.process.cmdline contains:anycase 'GetDelegateForFunctionPointer' OR src.process.cmdline contains:anycase 'System.Reflection.CallingConventions') AND NOT (cmdScript.content contains:anycase 'ProgramData\\N-Able Technologies\\AutomationManager'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Installation & Persistence",
        "name": "COM (Component Object Model) Hijacking",
        "query": "((src.process.cmdline contains:anycase 'GetTypeFromCLSID' AND src.process.cmdline contains:anycase 'ShellExecute') OR (src.process.cmdline contains:anycase 'CreateInstance' AND src.process.cmdline contains:anycase 'ShellExecute') OR (src.process.cmdline contains:anycase 'GetTypeFromCLSID' AND src.process.cmdline contains:anycase 'CreateInstance'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "OneNote Suspicious Children Process",
        "query": "(NOT (src.process.image.path contains:anycase '\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\' AND src.process.image.path contains:anycase '\\\\FileCoAuth.exe') AND NOT (src.process.image.path contains:anycase '\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\' AND src.process.image.path contains:anycase '\\\\Teams.exe') AND NOT (src.process.name = 'rundll32.exe' AND src.process.cmdline contains:anycase 'PrintHTML') AND NOT (src.process.cmdline contains:anycase 'AppData\\\\Local\\\\Google\\\\Chrome' OR src.process.cmdline contains:anycase 'AppData\\\\Local\\\\Mozilla' OR src.process.cmdline contains:anycase 'AppData\\\\Local\\\\BraveSoftware' OR src.process.cmdline contains:anycase 'AppData\\\\Local\\\\Vivaldi' OR src.process.cmdline contains:anycase 'AppData\\\\Local\\\\Programs\\\\Opera')) AND ((src.process.parent.name = 'onenote.exe' AND (src.process.name in ('rundll32.exe', 'regsvr32.exe', 'bitsadmin.exe', 'certutil.exe', 'installutil.exe', 'schtasks.exe', 'wmic.exe', 'cscript.exe', 'wscript.exe', 'cmstp.exe', 'Microsoft.Workflow.Compiler.exe', 'regasm.exe', 'regsvcs.exe', 'mshta.exe', 'msxsl.exe', 'ieexec.exe', 'cmd.exe', 'powershell.exe', 'javaw.exe', 'pcalua.exe', 'curl.exe', 'scriptrunner.exe', 'certoc.exe', 'workfolders.exe', 'odbcconf.exe', 'msiexec.exe', 'msdt.exe') OR (src.process.name = 'explorer.exe' AND (src.process.cmdline contains:anycase '.hta' OR src.process.cmdline contains:anycase '.vb' OR src.process.cmdline contains:anycase '.wsh' OR src.process.cmdline contains:anycase '.js' OR src.process.cmdline contains:anycase '.ps' OR src.process.cmdline contains:anycase '.scr' OR src.process.cmdline contains:anycase '.pif' OR src.process.cmdline contains:anycase '.bat' OR src.process.cmdline contains:anycase '.cmd')) OR (src.process.image.path contains:anycase '\\\\AppData\\\\' OR src.process.image.path contains:anycase '\\\\Users\\\\Public\\\\' OR src.process.image.path contains:anycase '\\\\ProgramData\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\Tasks\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\Temp\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\System32\\\\Tasks\\\\'))) OR (tgt.file.path contains:anycase '\\\\exported\\\\' AND tgt.file.path contains:anycase '.lnk' AND src.process.name = 'onenote.exe'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path, tgt.file.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path, tgt.file.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "Netsh Port Forwarding / Opening",
        "query": "(src.process.name = 'netsh.exe' AND ((src.process.cmdline contains:anycase 'advfirewall' AND src.process.cmdline contains:anycase 'firewall' AND src.process.cmdline contains:anycase 'add' AND src.process.cmdline contains:anycase 'rule' AND src.process.cmdline contains:anycase 'action=allow' AND src.process.cmdline contains:anycase 'localport=') OR (src.process.cmdline contains:anycase 'firewall' AND src.process.cmdline contains:anycase 'add' AND src.process.cmdline contains:anycase 'portopening')))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "PowerShell Credential Prompt",
        "query": "(cmdScript.content contains:anycase 'PromptForCredential(')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "PowerShell NTFS Alternate Data Stream",
        "query": "(cmdScript.content contains:anycase (\"set-content\",\"add-content\") AND cmdScript.content contains:anycase (\"-stream\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Malware & Threats",
        "name": "Download Files From Suspicious TLDs",
        "query": "(((url.address contains:anycase '.country/' OR url.address contains:anycase '.stream/' OR url.address contains:anycase '.gdn/' OR url.address contains:anycase '.mom/' OR url.address contains:anycase '.xin/' OR url.address contains:anycase '.kim/' OR url.address contains:anycase '.men/' OR url.address contains:anycase '.loan/' OR url.address contains:anycase '.download/' OR url.address contains:anycase '.racing/' OR url.address contains:anycase '.online/' OR url.address contains:anycase '.science/' OR url.address contains:anycase '.ren/' OR url.address contains:anycase '.gb/' OR url.address contains:anycase '.win/' OR url.address contains:anycase '.top/' OR url.address contains:anycase '.review/' OR url.address contains:anycase '.vip/' OR url.address contains:anycase '.party/' OR url.address contains:anycase '.tech/' OR url.address contains:anycase '.xyz/' OR url.address contains:anycase '.date/' OR url.address contains:anycase '.faith/' OR url.address contains:anycase '.cricket/' OR url.address contains:anycase '.space/' OR url.address contains:anycase '.info/' OR url.address contains:anycase '.vn/' OR url.address contains:anycase '.cm/' OR url.address contains:anycase '.am/' OR url.address contains:anycase '.cc/' OR url.address contains:anycase '.asia/' OR url.address contains:anycase '.ws/' OR url.address contains:anycase '.tk/' OR url.address contains:anycase '.biz/' OR url.address contains:anycase '.su/' OR url.address contains:anycase '.st/' OR url.address contains:anycase '.ge/' OR url.address contains:anycase '.pk/' OR url.address contains:anycase '.nu/' OR url.address contains:anycase '.me/' OR url.address contains:anycase '.ph/' OR url.address contains:anycase '.to/' OR url.address contains:anycase '.tt/' OR url.address contains:anycase '.name/' OR url.address contains:anycase '.tv/' OR url.address contains:anycase '.kz/' OR url.address contains:anycase '.tc/' OR url.address contains:anycase '.mobi/' OR url.address contains:anycase '.study/' OR url.address contains:anycase '.click/' OR url.address contains:anycase '.link/' OR url.address contains:anycase '.trade/' OR url.address contains:anycase '.accountant/' OR url.address contains:anycase '.cf/' OR url.address contains:anycase '.gq/' OR url.address contains:anycase '.ml/' OR url.address contains:anycase '.ga/' OR url.address contains:anycase '.pw/') AND (url.address endswith '.exe' OR url.address endswith '.vbs' OR url.address endswith '.bat' OR url.address endswith '.rar' OR url.address endswith '.ps1' OR url.address endswith '.doc' OR url.address endswith '.docm' OR url.address endswith '.xls' OR url.address endswith '.xlsm' OR url.address endswith '.pptm' OR url.address endswith '.rtf' OR url.address endswith '.hta' OR url.address endswith '.dll' OR url.address endswith '.ws' OR url.address endswith '.wsf' OR url.address endswith '.sct' OR url.address endswith '.zip' OR url.address endswith '.bin')) AND NOT (url.address contains:anycase 'dailyinnovation.biz' OR url.address contains:anycase 'bigolive.tv' OR url.address contains:anycase 'snow.me' OR url.address contains:anycase 'freesudoku.me'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, url.address\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, url.address, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Malware & Threats",
        "name": "Download Files From Non-Legitimate TLDs",
        "query": "((url.address endswith '.exe' OR url.address endswith '.vbs' OR url.address endswith '.bat' OR url.address endswith '.rar' OR url.address endswith '.ps1' OR url.address endswith '.doc' OR url.address endswith '.docm' OR url.address endswith '.xls' OR url.address endswith '.xlsm' OR url.address endswith '.pptm' OR url.address endswith '.rtf' OR url.address endswith '.hta' OR url.address endswith '.dll' OR url.address endswith '.ws' OR url.address endswith '.wsf' OR url.address endswith '.sct' OR url.address endswith '.zip' OR url.address endswith '.bin') AND NOT (url.address contains:anycase 'LOCAL' OR url.address contains:anycase '.com' OR url.address contains:anycase '.org' OR url.address contains:anycase '.net' OR url.address contains:anycase '.edu' OR url.address contains:anycase '.gov' OR url.address contains:anycase '.int' OR url.address contains:anycase '.uk' OR url.address contains:anycase '.ca' OR url.address contains:anycase '.de' OR url.address contains:anycase '.jp' OR url.address contains:anycase '.fr' OR url.address contains:anycase '.au' OR url.address contains:anycase '.us' OR url.address contains:anycase '.ch' OR url.address contains:anycase '.it' OR url.address contains:anycase '.nl' OR url.address contains:anycase '.se' OR url.address contains:anycase '.no' OR url.address contains:anycase '.es' OR url.address contains:anycase '.cn' OR url.address contains:anycase '.eu' OR url.address contains:anycase '.kr' OR url.address contains:anycase '.io' OR url.address contains:anycase '.ms' OR src.ip.address matches '^(10\\\\.|172\\\\.(1[6-9]|2[0-9]|3[0-1])\\\\.|192\\\\.168\\\\.|127\\\\.).*' OR dst.ip.address matches '^(10\\\\.|172\\\\.(1[6-9]|2[0-9]|3[0-1])\\\\.|192\\\\.168\\\\.|127\\\\.).*'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, url.address, src.ip.address, dst.ip.address\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, url.address, src.ip.address, dst.ip.address, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Command & Control",
        "name": "Ngrok Process Execution",
        "query": "((src.process.name = 'ngrok.exe' AND (src.process.cmdline contains:anycase ' tcp ' OR src.process.cmdline contains:anycase ' http ' OR src.process.cmdline contains:anycase ' authtoken ')) OR (src.process.cmdline contains:anycase ' tcp 139' OR src.process.cmdline contains:anycase ' tcp 445' OR src.process.cmdline contains:anycase ' tcp 3389' OR src.process.cmdline contains:anycase ' tcp 5985' OR src.process.cmdline contains:anycase ' tcp 5986')) OR event.dns.request contains:anycase \"ngrok\"\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, event.dns.request \n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, event.dns.request, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "Burp Suite Tool Detected",
        "query": "(event.dns.request contains:anycase 'burpcollaborator.net' OR url.address contains:anycase 'burpcollaborator.net' AND (src.ip.address matches '^(10\\\\.|172\\\\.(1[6-9]|2[0-9]|3[0-1])\\\\.|192\\\\.168\\\\.|127\\\\.).*' OR dst.ip.address matches '^(10\\\\.|172\\\\.(1[6-9]|2[0-9]|3[0-1])\\\\.|192\\\\.168\\\\.|127\\\\.).*'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, event.dns.request, url.address, src.ip.address, dst.ip.address\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, event.dns.request, url.address, src.ip.address, dst.ip.address, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Lateral Movement",
        "name": "Impacket Wmiexec Module",
        "query": "(src.process.parent.name = 'wmiprvse.exe' AND (src.process.cmdline contains:anycase '\\\\127.0.0.1' OR src.process.cmdline matches '.*\\\\\\\\__[0-9]{10}\\\\.[0-9]{6}.*' OR src.process.cmdline contains:anycase '$ProgressPreference=' OR src.process.cmdline matches '^cmd\\.exe /q /c .*' OR src.process.cmdline matches '^powershell\\.exe -nop -e .*'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "WMIC Command To Determine The Antivirus",
        "query": "(((src.process.cmdline contains:anycase 'WMIC' AND src.process.cmdline contains:anycase 'AntiVirusProduct') AND NOT (src.process.parent.name in ('pycharm64.exe', 'idea64.exe'))) OR (cmdScript.content contains:anycase 'WMIC' AND cmdScript.content contains:anycase 'AntiVirusProduct') OR (src.process.cmdline contains:anycase 'wmic' AND src.process.cmdline contains:anycase 'FirewallProduct') OR (cmdScript.content contains:anycase 'wmi' AND cmdScript.content contains:anycase 'FirewallProduct'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "Dism Disabling Windows Defender",
        "query": "(src.process.name = 'dism.exe' AND src.process.cmdline contains:anycase '/Disable-Feature' AND src.process.cmdline contains:anycase 'Windows-Defender')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Impact",
        "name": "WMIC Uninstall Product",
        "query": "(src.process.cmdline contains:anycase 'product' AND src.process.cmdline contains:anycase 'name' AND src.process.cmdline contains:anycase 'call' AND src.process.cmdline contains:anycase 'uninstall')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "Suspicious Double Extension",
        "query": "(src.process.name endswith '.doc.exe' OR src.process.name endswith '.docx.exe' OR src.process.name endswith '.xls.exe' OR src.process.name endswith '.xlsx.exe' OR src.process.name endswith '.ppt.exe' OR src.process.name endswith '.pptx.exe' OR src.process.name endswith '.rtf.exe' OR src.process.name endswith '.pdf.exe' OR src.process.name endswith '.txt.exe' OR src.process.name endswith ' .exe' OR src.process.name endswith '__.exe')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "WiFi Credentials Harvesting Using Netsh",
        "query": "(src.process.cmdline contains:anycase 'wlan' AND src.process.cmdline contains:anycase 'profile' AND src.process.cmdline contains:anycase 'key' AND src.process.cmdline contains:anycase 'clear')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "ETW Tampering",
        "query": "(((src.process.cmdline contains:anycase 'sl' AND src.process.cmdline contains:anycase '/e:false') OR (src.process.cmdline contains:anycase 'sl' AND src.process.cmdline contains:anycase '/enabled:false') OR src.process.cmdline contains:anycase 'set-log' OR (src.process.cmdline contains:anycase 'logman' AND src.process.cmdline contains:anycase 'update' AND src.process.cmdline contains:anycase '--p' AND src.process.cmdline contains:anycase '-ets') OR src.process.cmdline contains:anycase 'set-etwtraceprovider' OR src.process.cmdline contains:anycase 'remove-etwtraceprovider') AND NOT (src.process.cmdline contains:anycase 'Microsoft-Windows-PrintService'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & LOLBAS",
        "name": "Suspicious Windows Script Execution",
        "query": "(((src.process.name in ('wscript.exe', 'cscript.exe') AND (src.process.cmdline contains:anycase 'C:\\\\Users\\\\*\\\\Roaming\\\\' OR src.process.cmdline contains:anycase 'C:\\\\ProgramData\\\\') AND src.process.cmdline contains:anycase '.txt' AND (src.process.cmdline contains:anycase '/E:jscript' OR src.process.cmdline contains:anycase '/E:vbscript'))) OR (src.process.name in ('wscript.exe', 'cscript.exe') AND src.process.cmdline contains:anycase '/b' AND src.process.cmdline contains:anycase '.js'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "AdFind Usage",
        "query": "(src.process.name = 'adfind.exe' OR (src.process.cmdline contains:anycase ' -f ' AND src.process.cmdline contains:anycase 'category=') OR src.process.cmdline contains:anycase 'trustdmp' OR src.process.cmdline contains:anycase ' -gcb' OR (src.process.cmdline contains:anycase ' -gc' AND src.process.cmdline contains:anycase ' -sc ') OR src.process.cmdline contains:anycase ' -subnets ')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "Suspicious Headless Web Browser Execution To Download File",
        "query": "(src.process.name contains:anycase (\"chrome.exe\", \"msedge.exe\")) AND (src.process.cmdline contains:anycase (\"--headless\",\"--dump-dom\")) AND src.process.cmdline contains:anycase \"http\"\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "Copying Browser Files With Credentials",
        "query": "((src.process.name = 'esentutl.exe' OR src.process.cmdline contains:anycase 'copy ' OR src.process.cmdline contains:anycase 'Copy-Item') AND ((src.process.cmdline contains:anycase '\\\\User Data\\\\Default\\\\Login Data' OR src.process.cmdline contains:anycase '\\\\User Data\\\\Default\\\\Network\\\\Cookie') OR (src.process.cmdline contains:anycase '\\\\Profiles\\\\' AND (src.process.cmdline contains:anycase 'cookies.sqlite' OR src.process.cmdline contains:anycase 'key3.db' OR src.process.cmdline contains:anycase 'logins.json')) OR (src.process.cmdline contains:anycase '\\\\Opera Stable\\\\Login Data' OR src.process.cmdline contains:anycase '\\\\Opera Stable\\\\Cookies')))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "Execution From Suspicious Folder",
        "query": "((src.process.image.path contains:anycase 'C:\\\\Perflogs\\\\' OR src.process.image.path contains:anycase '\\\\$Recycle.bin\\\\' OR src.process.image.path contains:anycase '\\\\config\\\\systemprofile\\\\' OR src.process.image.path contains:anycase '\\\\Intel\\\\Logs\\\\' OR src.process.image.path contains:anycase '\\\\RSA\\\\MachineKeys\\\\' OR src.process.image.path contains:anycase '\\\\Users\\\\All Users\\\\' OR src.process.image.path contains:anycase '\\\\Users\\\\Default\\\\' OR src.process.image.path contains:anycase '\\\\Users\\\\NetworkService\\\\' OR src.process.image.path contains:anycase '\\\\Users\\\\Public\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\addins\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\debug\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\Fonts\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\Help\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\IME\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\Media\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\repair\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\security\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\System32\\\\Tasks\\\\' OR src.process.image.path contains:anycase '\\\\Windows\\\\Tasks\\\\') AND NOT (src.process.image.path contains:anycase 'firefox' OR src.process.image.path contains:anycase 'citrix' OR src.process.image.path contains:anycase 'splunkd.exe' OR src.process.image.path contains:anycase 'ldapadmin.exe' OR src.process.image.path contains:anycase 'acslaunch_win' OR src.process.image.path contains:anycase 'gotoassist' OR src.process.user contains:anycase (\"system\",\"syst\u00e8me\")))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "RDP Sensitive Settings Changed",
        "query": "// Terminal Server\\\\fDenyTSConnections => 0 RDP ON \n(registry.keyPath contains:anycase '\\\\services\\\\TermService\\\\Parameters\\\\ServiceDll' OR registry.keyPath contains:anycase '\\\\Control\\\\Terminal Server\\\\fSingleSessionPerUser' OR registry.keyPath contains:anycase '\\\\Control\\\\Terminal Server\\\\fDenyTSConnections' OR registry.keyPath contains:anycase '\\\\Policies\\\\Microsoft\\\\Windows NT\\\\Terminal Services\\\\Shadow' OR registry.keyPath contains:anycase '\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram' OR registry.keyPath contains:anycase '\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\UserAuthentication')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, registry.keyPath, registry.value\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, registry.keyPath, registry.value, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Command & Control",
        "name": "Telegram Bot API Request",
        "query": "(event.dns.request contains:anycase 'api.telegram.org' OR url.address contains:anycase 'api.telegram.org')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, event.dns.request, url.address\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, event.dns.request, url.address, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Exfiltration",
        "name": "Exfiltration Domain In Command Line",
        "query": "(src.process.cmdline contains:anycase 'httpbin.org' OR src.process.cmdline contains:anycase 'httpdump.io' OR src.process.cmdline contains:anycase 'pie.dev' OR src.process.cmdline contains:anycase 'requestbin.com' OR src.process.cmdline contains:anycase 'requestcatcher.com' OR src.process.cmdline contains:anycase 'requestinspector.com' OR src.process.cmdline contains:anycase 'typedwebhook.tools' OR src.process.cmdline contains:anycase 'webhook.site' OR src.process.cmdline contains:anycase 'webhookinbox.com')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion",
        "name": "Suspicious XOR Encoded PowerShell Command Line",
        "query": "((src.process.name in ('powershell.exe', 'powershell_ise.exe') AND ( (src.process.cmdline contains:anycase 'char' AND src.process.cmdline contains:anycase 'bxor' AND src.process.cmdline contains:anycase 'join') OR (cmdScript.content contains:anycase 'char' AND cmdScript.content contains:anycase 'bxor' AND cmdScript.content contains:anycase 'join') )) AND NOT (cmdScript.content contains:anycase '\\program files\\sentinelone' OR cmdScript.content contains:anycase 'windowspowershell\\modules\\dbatools\\allcommands.ps1'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Discovery & Reconnaissance",
        "name": "Advanced IP Scanner",
        "query": "(src.process.cmdline contains:anycase 'advanced_ip_scanner' OR src.process.name contains:anycase 'advanced_ip_scanner' OR tgt.file.path contains:anycase 'advanced_ip_scanner' OR (src.process.cmdline contains:anycase '/portable' AND src.process.cmdline contains:anycase '/lng'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.file.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.file.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Malware & Threats",
        "name": "Possible Malicious File Double Extension from URL",
        "query": "(url.address endswith '.doc.exe' OR url.address endswith '.pdf.exe' OR url.address endswith '.ppt.exe' OR url.address endswith '.docx.exe' OR url.address endswith '.pptx.exe' OR url.address endswith '.xls.exe' OR url.address endswith '.xlsx.exe' OR url.address endswith '.txt.exe' OR url.address endswith '.jpg.exe' OR url.address endswith '.rar.exe' OR url.address endswith '.zip.exe' OR url.address endswith '.doc.iso' OR url.address endswith '.pdf.iso' OR url.address endswith '.ppt.iso' OR url.address endswith '.docx.iso' OR url.address endswith '.pptx.iso' OR url.address endswith '.xls.iso' OR url.address endswith '.xlsx.iso' OR url.address endswith '.txt.iso' OR url.address endswith '.jpg.iso' OR url.address endswith '.rar.iso' OR url.address endswith '.zip.iso')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.name, url.address\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.name, url.address, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Credential Access",
        "name": "KeePass Config XML In Command-Line",
        "query": "(src.process.cmdline contains:anycase 'keepass' AND src.process.cmdline contains:anycase 'config.xml')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Defense Evasion & Execution",
        "name": "CreateRemoteThread Common Process Injection",
        "query": "( (indicator.name contains:anycase 'ProcessInjection' OR indicator.category = 'injection' OR event.type = 'Cross Process Thread Create') AND (tgt.process.name in ('rundll32.exe', 'dllhost.exe', 'lsass.exe', 'svchost.exe', 'wermgr.exe', 'bash.exe', 'cvtres.exe', 'defrag.exe', 'dnx.exe', 'esentutl.exe', 'excel.exe', 'expand.exe', 'explorer.exe', 'find.exe', 'findstr.exe', 'forfiles.exe', 'git.exe', 'gpupdate.exe', 'hh.exe', 'iexplore.exe', 'installutil.exe', 'lync.exe', 'makecab.exe', 'mdnsresponder.exe', 'monitoringhost.exe', 'msbuild.exe', 'mshta.exe', 'msiexec.exe', 'mspaint.exe', 'outlook.exe', 'ping.exe', 'powershell.exe', 'provtool.exe', 'python.exe', 'regsvr32.exe', 'robocopy.exe', 'runonce.exe', 'sapcimc.exe', 'schtasks.exe', 'smartscreen.exe', 'spoolsv.exe', 'tstheme.exe', 'vssadmin.exe', 'vssvc.exe', 'w3wp.exe', 'winlogon.exe', 'winscp.exe', 'wmic.exe', 'word.exe', 'wscript.exe', 'cscript.exe', 'winword.exe') OR (tgt.process.image.path contains:anycase 'lsass.exe' AND NOT src.process.name in ('mmc.exe', 'sysmon64.exe', 'sysmon.exe', 'werfault.exe')) OR (indicator.metadata contains:anycase 'kernel32.dll' AND (indicator.metadata contains:anycase 'LoadLibraryA' OR indicator.metadata contains:anycase 'LoadLibraryExA' OR indicator.metadata contains:anycase 'LoadLibraryW' OR indicator.metadata contains:anycase 'LoadLibraryExW'))) )\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.image.path, indicator.name, indicator.description, indicator.metadata, event.type\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, tgt.process.name, tgt.process.image.path, indicator.name, indicator.description, indicator.metadata, event.type, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Execution & TTPs",
        "name": "Rare Lsass Child Found",
        "query": "(src.process.parent.name = 'lsass.exe' AND (src.process.parent.image.path contains:anycase '\\\\windows\\\\system32' OR src.process.parent.image.path contains:anycase '\\\\windows\\\\syswow64') AND NOT src.process.name in ('efsui.exe', 'nxserver.bin', 'nxnode.bin', 'mfeepehost.exe', 'epepccredentialproviderhelper.exe', '6432transport.exe', 'lsass.exe', 'installerevents.exe', 'werfault.exe'))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.parent.image.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.parent.image.path, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Exfiltration",
        "name": "Python HTTP Server",
        "query": "((src.process.cmdline contains:anycase 'python' AND src.process.cmdline contains:anycase ' -m ' AND (src.process.cmdline contains:anycase 'http.server' OR src.process.cmdline contains:anycase 'SimpleHTTPServer')) OR (cmdScript.content contains:anycase 'python' AND cmdScript.content contains:anycase ' -m ' AND (cmdScript.content contains:anycase 'http.server' OR cmdScript.content contains:anycase 'SimpleHTTPServer')))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category" : "Helper & Utilities",
        "name": "HELPER - Storyline ID Hunting",
        "query": "#storylineid contains \"STORYLINE\" \n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by src.process.storyline.id, src.process.pid, src.process.parent.name, src.process.cmdline, src.process.name, tgt.file.path, tgt.process.cmdline, cmdScript.content\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, src.process.storyline.id, src.process.pid, src.process.parent.name, src.process.cmdline, src.process.name, tgt.file.path, tgt.process.cmdline, cmdScript.content, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category": "Helper & Utilities",
        "name": "HELPER - Get All Indicator names from one endpoint",
        "query": "endpoint.name contains \"XXX\" \n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by indicator.name, indicator.description, indicator.metadata \n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, indicator.name, indicator.description, indicator.metadata, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category" : "Exfiltration",
        "name": "Robocopy - Suspicious Copy From or To System Directory",
        "query": "((src.process.name contains:anycase 'robocopy.exe' OR src.process.name contains:anycase 'xcopy.exe') OR\n(src.process.name contains:anycase 'cmd.exe' AND src.process.cmdline contains:anycase 'copy ') OR\n((src.process.name contains:anycase 'powershell.exe' OR src.process.name contains:anycase 'pwsh.exe') AND\n (src.process.cmdline contains:anycase 'copy-item' OR src.process.cmdline contains:anycase ' copy ' OR src.process.cmdline contains:anycase 'cpi ' OR src.process.cmdline contains:anycase ' cp '))) AND\n(src.process.cmdline contains:anycase '\\\\System32' OR src.process.cmdline contains:anycase '\\\\SysWOW64' OR src.process.cmdline contains:anycase '\\\\WinSxS')\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, Count\n| sort -Count\n| limit 100000"
    },
    {
        "category" : "Command & Control",
        "name": "Remote installation of custom chrome extensions",
        "query": "endpoint.os = \"windows\" #filepath contains:anycase \"secure preferences\" event.type contains:anycase (\"File Creation\",\"File Modification\") NOT (src.process.name contains:anycase (\"chrome\",\"edege\",\"spotify\",\"opera\",\"brave\",\"msedgewebview2\"))\n| group _FirstSeenMs=min(event.time), _LastSeenMs=max(event.time), Count=count() by endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path\n| let _firstSeenNs = _FirstSeenMs * 1000000\n| let _lastSeenNs = _LastSeenMs * 1000000\n| columns  \"first.timestamp\" = _firstSeenNs, \"last.timestamp\" = _lastSeenNs, endpoint.name, src.process.user, src.process.parent.name, src.process.name, src.process.cmdline, src.process.image.path, Count\n| sort -Count\n| limit 100000"
    }
]
